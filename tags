!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AutoLock	HIGHPROPERTYSERVER.cpp	/^        AutoLock(pthread_mutex_t & mutex):mutex(mutex)$/;"	f	class:AutoLock
AutoLock	HIGHPROPERTYSERVER.cpp	/^class AutoLock$/;"	c	file:
AutoLock	JSONPROPERTYSERVER.cpp	/^		AutoLock(pthread_mutex_t & mutex):mutex(mutex)$/;"	f	class:AutoLock
AutoLock	JSONPROPERTYSERVER.cpp	/^class AutoLock$/;"	c	file:
CJSON_EXPORT_SYMBOLS	cJSON.h	108;"	d
CJSON_NESTING_LIMIT	cJSON.h	129;"	d
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
CJSON_PUBLIC	cJSON.h	112;"	d
CJSON_PUBLIC	cJSON.h	114;"	d
CJSON_PUBLIC	cJSON.h	116;"	d
CJSON_PUBLIC	cJSON.h	120;"	d
CJSON_PUBLIC	cJSON.h	122;"	d
CJSON_VERSION_MAJOR	cJSON.h	32;"	d
CJSON_VERSION_MINOR	cJSON.h	33;"	d
CJSON_VERSION_PATCH	cJSON.h	34;"	d
CREATE_DAEMON	JSONPROPERTYSERVER.cpp	27;"	d	file:
Channel	HIGHPROPERTYSERVER.cpp	/^        Channel(int fd):packetSize(0),readSize(0),fd(fd)$/;"	f	class:Channel
Channel	HIGHPROPERTYSERVER.cpp	/^class Channel$/;"	c	file:
Channel	JSONPROPERTYSERVER.cpp	/^		Channel(int fd):packetSize(0),readSize(0),fd(fd)$/;"	f	class:Channel
Channel	JSONPROPERTYSERVER.cpp	/^class Channel$/;"	c	file:
JSON_H	json.h	2;"	d
Json	json.cpp	/^Json::Json()$/;"	f	class:Json
Json	json.h	/^class Json$/;"	c
JsonArray	json.cpp	/^JsonArray::JsonArray()$/;"	f	class:JsonArray
JsonArray	json.h	/^class JsonArray$/;"	c
MYMD5	myownsql/opensslmd5API.h	/^	const  char*MYMD5( const char*buf)$/;"	f
MYMD5	opensslmd5API.h	/^	const  char*MYMD5( const char*buf)$/;"	f
MyLock	HIGHPROPERTYSERVER.cpp	43;"	d	file:
MyLock	JSONPROPERTYSERVER.cpp	53;"	d	file:
OPENSSLMD5API_H	myownsql/opensslmd5API.h	2;"	d
OPENSSLMD5API_H	opensslmd5API.h	2;"	d
REDIS_H	redis.h	2;"	d
Redis	myredis.h	/^Redis::Redis()$/;"	f	class:Redis
Redis	myredis.h	/^class Redis$/;"	c
Redis	redis.cpp	/^Redis::Redis()$/;"	f	class:Redis
Redis	redis.h	/^class Redis$/;"	c
Redis	testredis.cpp	/^Redis::Redis()$/;"	f	class:Redis
Redis	testredis.cpp	/^class Redis$/;"	c	file:
_MYREDIS_H	myredis.h	2;"	d
__MYSQLLIB_H_	myownsql/mysqllib.h	2;"	d
__MYSQLLIB_H_	mysqllib.h	2;"	d
__WINDOWS__	cJSON.h	84;"	d
accept_thread_func	HIGHPROPERTYSERVER.cpp	/^void *accept_thread_func(void *ptr)$/;"	f
accept_thread_func	JSONPROPERTYSERVER.cpp	/^void *accept_thread_func(void *ptr)$/;"	f
accept_threads	HIGHPROPERTYSERVER.cpp	/^int accept_threads=4;$/;"	v
accept_threads	JSONPROPERTYSERVER.cpp	/^int accept_threads=4;$/;"	v
add	json.cpp	/^void Json::add(string key, string value)$/;"	f	class:Json
add	json.cpp	/^void Json::add(string key,cJSON*obj)$/;"	f	class:Json
add	json.cpp	/^void Json::add(string key,double value)$/;"	f	class:Json
add	json.cpp	/^void Json::add(string key,int value)$/;"	f	class:Json
addHash	myredis.h	/^int Redis::addHash(string name,list<string> keys,list<string> values,int timeout)$/;"	f	class:Redis
addHash	redis.cpp	/^int Redis::addHash(QString name, QStringList keys,QStringList values, int timeout)$/;"	f	class:Redis
addHash	testredis.cpp	/^int Redis::addHash(string name,list<string> keys,list<string> values,int timeout)$/;"	f	class:Redis
addSet	myredis.h	/^int Redis::addSet(string set,string value)$/;"	f	class:Redis
addSet	redis.cpp	/^int Redis::addSet(QString set, QString value)$/;"	f	class:Redis
addSet	testredis.cpp	/^int Redis::addSet(string set,string value)$/;"	f	class:Redis
addarray	json.cpp	/^void JsonArray::addarray(cJSON*item)$/;"	f	class:JsonArray
allocate	cJSON.c	/^    void *(*allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
array	cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
boolean	cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
buf	HIGHPROPERTYSERVER.cpp	/^        char *buf;$/;"	m	class:Channel	file:
buf	JSONPROPERTYSERVER.cpp	/^		char *buf;$/;"	m	class:Channel	file:
buf	json.h	/^		char *buf;$/;"	m	class:Json
buf	json.h	/^	char *buf;$/;"	m	class:JsonArray
buffer	cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon3	file:
buffer_at_offset	cJSON.c	220;"	d	file:
buffer_skip_whitespace	cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
c	cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *c);$/;"	v
c	myownsql/opensslmd5API.h	/^	MD5_CTX c;$/;"	v
c	opensslmd5API.h	/^	MD5_CTX c;$/;"	v
cJSON	cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	cJSON.h	241;"	d
cJSON_AddFalseToObject	cJSON.h	240;"	d
cJSON_AddItemReferenceToArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	cJSON.h	238;"	d
cJSON_AddNumberToObject	cJSON.h	242;"	d
cJSON_AddRawToObject	cJSON.h	244;"	d
cJSON_AddStringToObject	cJSON.h	243;"	d
cJSON_AddTrueToObject	cJSON.h	239;"	d
cJSON_Array	cJSON.h	45;"	d
cJSON_ArrayForEach	cJSON.h	253;"	d
cJSON_CreateArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateBool	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)$/;"	f
cJSON_CreateDoubleArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateRaw	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)$/;"	f
cJSON_CreateTrue	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	cJSON.h	40;"	d
cJSON_GetArrayItem	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetObjectItem	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Invalid	cJSON.h	39;"	d
cJSON_IsReference	cJSON.h	49;"	d
cJSON_Minify	cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	cJSON.h	42;"	d
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	cJSON.h	43;"	d
cJSON_Object	cJSON.h	46;"	d
cJSON_Parse	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithOpts	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	cJSON.h	47;"	d
cJSON_ReplaceItemInArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_SetIntValue	cJSON.h	247;"	d
cJSON_SetNumberHelper	cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	cJSON.h	250;"	d
cJSON_String	cJSON.h	44;"	d
cJSON_StringIsConst	cJSON.h	50;"	d
cJSON_True	cJSON.h	41;"	d
cJSON_Version	cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	cJSON.h	24;"	d
cJSON_bool	cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
can_access_at_index	cJSON.c	217;"	d	file:
can_read	cJSON.c	214;"	d	file:
cannot_access_at_index	cJSON.c	218;"	d	file:
cannot_read	cJSON.c	215;"	d	file:
case_insensitive_strcmp	cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
channels	HIGHPROPERTYSERVER.cpp	/^list<Channel*>channels;$/;"	v
channels	JSONPROPERTYSERVER.cpp	/^list<Channel*>channels;$/;"	v
chartocjson	json.h	/^		cJSON*chartocjson;$/;"	m	class:Json
chartocjson	json.h	/^	 cJSON *chartocjson;$/;"	m	class:JsonArray
child	cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
cjson_min	cJSON.c	1020;"	d	file:
content	cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon2	file:
create_reference	cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
ctx	myredis.h	/^		redisContext*ctx;$/;"	m	class:Redis
ctx	redis.h	/^   redisContext*ctx;$/;"	m	class:Redis
ctx	testredis.cpp	/^		redisContext*ctx;$/;"	m	class:Redis	file:
deallocate	cJSON.c	/^    void (*deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
depth	cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon2	file:
depth	cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon3	file:
ensure	cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
epoll_add	HIGHPROPERTYSERVER.cpp	/^void epoll_add(int newfd)$/;"	f
epoll_add	JSONPROPERTYSERVER.cpp	/^void epoll_add(int newfd)$/;"	f
epoll_mod	HIGHPROPERTYSERVER.cpp	/^void epoll_mod(Channel*channel)$/;"	f
epoll_mod	JSONPROPERTYSERVER.cpp	/^void epoll_mod(Channel*channel)$/;"	f
epollfd	HIGHPROPERTYSERVER.cpp	/^int epollfd;$/;"	v
epollfd	JSONPROPERTYSERVER.cpp	/^int epollfd;$/;"	v
error	cJSON.c	/^} error;$/;"	t	typeref:struct:__anon1	file:
exec	HIGHPROPERTYSERVER.cpp	/^void exec()$/;"	f
exec	JSONPROPERTYSERVER.cpp	/^void exec()$/;"	f
false	cJSON.c	47;"	d	file:
fd	HIGHPROPERTYSERVER.cpp	/^        int fd;$/;"	m	class:Channel	file:
fd	JSONPROPERTYSERVER.cpp	/^		int fd;$/;"	m	class:Channel	file:
finaltemp	myownsql/opensslmd5API.h	/^ 	 char finaltemp[40]={0};$/;"	v
finaltemp	opensslmd5API.h	/^ 	 char finaltemp[40]={0};$/;"	v
format	cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon3	file:
free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
getDouble	json.cpp	/^double Json::getDouble(string key)$/;"	f	class:Json
getHashMember	myredis.h	/^string Redis::getHashMember(string name,string keyname)$/;"	f	class:Redis
getHashMember	redis.cpp	/^QString Redis::getHashMember(QString name, QString keyname)$/;"	f	class:Redis
getHashMember	testredis.cpp	/^string Redis::getHashMember(string name,string keyname)$/;"	f	class:Redis
getInstance	myownsql/mysqllib.cpp	/^mysqllib * mysqllib::getInstance()$/;"	f	class:mysqllib
getInstance	mysqllib.cpp	/^mysqllib * mysqllib::getInstance()$/;"	f	class:mysqllib
getInt	json.cpp	/^int Json::getInt(string key)$/;"	f	class:Json
getJsonArray	json.cpp	/^cJSON*JsonArray::getJsonArray()$/;"	f	class:JsonArray
getObject	json.cpp	/^cJSON*Json::getObject(string key)$/;"	f	class:Json
getSet	myredis.h	/^list<string> Redis::getSet(string set)$/;"	f	class:Redis
getSet	redis.cpp	/^QStringList Redis::getSet(QString set)$/;"	f	class:Redis
getSet	testredis.cpp	/^list<string> Redis::getSet(string set)$/;"	f	class:Redis
getString	json.cpp	/^string Json::getString(string key)$/;"	f	class:Json
get_array_item	cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_decimal_point	cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_object_item	cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
getnearbydrivers	JSONPROPERTYSERVER.cpp	/^int getnearbydrivers(Channel*channel)$/;"	f
getroot	json.cpp	/^cJSON* Json::getroot()$/;"	f	class:Json
global_error	cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	cJSON.c	/^static internal_hooks global_hooks = { malloc, free, realloc };$/;"	v	file:
handleData	HIGHPROPERTYSERVER.cpp	/^void handleData(Channel*channel)$/;"	f
handleData	JSONPROPERTYSERVER.cpp	/^void handleData(Channel*channel)$/;"	f
handleredis	JSONPROPERTYSERVER.cpp	/^int handleredis(Channel*channel)$/;"	f
hooks	cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon2	file:
hooks	cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon3	file:
hooks	cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
init	HIGHPROPERTYSERVER.cpp	/^void init()$/;"	f
init	JSONPROPERTYSERVER.cpp	/^void init()$/;"	f
insert	mysqllib.cpp	/^int mysqllib::insert(char *sql)$/;"	f	class:mysqllib
instance	myownsql/mysqllib.cpp	/^mysqllib * mysqllib::instance = new mysqllib;$/;"	m	class:mysqllib	file:
instance	myownsql/mysqllib.h	/^		static mysqllib*instance;$/;"	m	class:mysqllib
instance	mysqllib.cpp	/^mysqllib * mysqllib::instance = new mysqllib;$/;"	m	class:mysqllib	file:
instance	mysqllib.h	/^		static mysqllib*instance;$/;"	m	class:mysqllib
internal_hooks	cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
json	cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon1	file:
jsonarray	json.h	/^	cJSON*jsonarray;$/;"	m	class:JsonArray
length	cJSON.c	/^    size_t length;$/;"	m	struct:__anon2	file:
length	cJSON.c	/^    size_t length;$/;"	m	struct:__anon3	file:
loginuser	JSONPROPERTYSERVER.cpp	/^int loginuser(string username,string password,Channel*channel)$/;"	f
main	HIGHPROPERTYCLIENT.cpp	/^int main()$/;"	f
main	HIGHPROPERTYSERVER.cpp	/^int main()$/;"	f
main	JSONPROPERTYSERVER.cpp	/^int main()$/;"	f
main	myownsql/client.cpp	/^int main(int argc, char *argv[])$/;"	f
main	myownsql/myserver.cpp	/^int main()$/;"	f
main	myownsql/mysql.c	/^int main()$/;"	f
main	myownsql/server.cpp	/^int main()$/;"	f
main	opensslmd5test.c	/^int main()$/;"	f
main	server.cpp	/^int main()$/;"	f
main	stringtodoubletest.cpp	/^int main()$/;"	f
main	testcjson.c	/^int main()$/;"	f
main	testmd5.c	/^int main()$/;"	f
main	testredis.cpp	/^int main()$/;"	f
main	teststringstream.cpp	/^int main()$/;"	f
malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
md5buf	myownsql/opensslmd5API.h	/^	unsigned char md5buf[MD5_DIGEST_LENGTH]={0};$/;"	v
md5buf	opensslmd5API.h	/^	unsigned char md5buf[MD5_DIGEST_LENGTH]={0};$/;"	v
mutex	HIGHPROPERTYSERVER.cpp	/^        pthread_mutex_t & mutex;$/;"	m	class:AutoLock	file:
mutex	HIGHPROPERTYSERVER.cpp	/^pthread_mutex_t mutex;$/;"	v
mutex	JSONPROPERTYSERVER.cpp	/^		pthread_mutex_t & mutex;$/;"	m	class:AutoLock	file:
mutex	JSONPROPERTYSERVER.cpp	/^pthread_mutex_t mutex;$/;"	v
myread	WRITEREADAVOIDPASTE.c	/^int myread(int fd,char buf[],int len)$/;"	f
myreadbuf	WRITEREADAVOIDPASTE.c	/^char * myreadbuf(int fd)$/;"	f
myreadlen	WRITEREADAVOIDPASTE.c	/^int myreadlen(int fd,uint32_t *len)$/;"	f
mysql	myownsql/mysqllib.h	/^		MYSQL*mysql;$/;"	m	class:mysqllib
mysql	mysqllib.h	/^		MYSQL*mysql;$/;"	m	class:mysqllib
mysqllib	myownsql/mysqllib.cpp	/^mysqllib::mysqllib()$/;"	f	class:mysqllib
mysqllib	myownsql/mysqllib.cpp	/^mysqllib::mysqllib(mysqllib&)$/;"	f	class:mysqllib
mysqllib	myownsql/mysqllib.h	/^class mysqllib$/;"	c
mysqllib	mysqllib.cpp	/^mysqllib::mysqllib()$/;"	f	class:mysqllib
mysqllib	mysqllib.cpp	/^mysqllib::mysqllib(mysqllib&)$/;"	f	class:mysqllib
mysqllib	mysqllib.h	/^class mysqllib$/;"	c
mywrite	WRITEREADAVOIDPASTE.c	/^int mywrite(int fd,char buf[],int len)$/;"	f
mywritebuf	WRITEREADAVOIDPASTE.c	/^void mywritebuf(int fd,char buf[])$/;"	f
mywritelen	WRITEREADAVOIDPASTE.c	/^int mywritelen(int fd,uint32_t len)$/;"	f
next	cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
noalloc	cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon3	file:
object	makefile	/^object=highpropertyserver$/;"	m
offset	cJSON.c	/^    size_t offset;$/;"	m	struct:__anon2	file:
offset	cJSON.c	/^    size_t offset;$/;"	m	struct:__anon3	file:
packetSize	HIGHPROPERTYSERVER.cpp	/^        uint32_t packetSize;$/;"	m	class:Channel	file:
packetSize	JSONPROPERTYSERVER.cpp	/^		uint32_t packetSize;$/;"	m	class:Channel	file:
parse	json.cpp	/^void Json::parse(string json_buf)$/;"	f	class:Json
parse_array	cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon2	file:
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_value	cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
position	cJSON.c	/^    size_t position;$/;"	m	struct:__anon1	file:
prev	cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
print	cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print	json.cpp	/^char *JsonArray::print()$/;"	f	class:JsonArray
print	json.cpp	/^char* Json::print()$/;"	f	class:Json
print_array	cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_number	cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon3	file:
readData	HIGHPROPERTYSERVER.cpp	/^Channel* readData(Channel*channel)$/;"	f
readData	JSONPROPERTYSERVER.cpp	/^Channel* readData(Channel*channel)$/;"	f
readSize	HIGHPROPERTYSERVER.cpp	/^        uint32_t readSize;$/;"	m	class:Channel	file:
readSize	JSONPROPERTYSERVER.cpp	/^		uint32_t readSize;$/;"	m	class:Channel	file:
reallocate	cJSON.c	/^    void *(*reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
registeruser	JSONPROPERTYSERVER.cpp	/^int registeruser(string username,string password,Channel*channel)$/;"	f
replace_item_in_object	cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
root	json.h	/^		cJSON* root;$/;"	m	class:Json
select	myownsql/mysqllib.cpp	/^int mysqllib::select(char *sql)$/;"	f	class:mysqllib
select	myownsql/mysqllib.cpp	/^int mysqllib::select(char *sql, char *result_buf)$/;"	f	class:mysqllib
select	mysqllib.cpp	/^int mysqllib::select(char *sql)$/;"	f	class:mysqllib
select	mysqllib.cpp	/^int mysqllib::select(char *sql, char *result_buf)$/;"	f	class:mysqllib
sem	HIGHPROPERTYSERVER.cpp	/^sem_t sem;$/;"	v
sem	JSONPROPERTYSERVER.cpp	/^sem_t sem;$/;"	v
server	HIGHPROPERTYSERVER.cpp	/^int server;$/;"	v
server	JSONPROPERTYSERVER.cpp	/^int server;$/;"	v
size	cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
sprinttemp	myownsql/opensslmd5API.h	/^	char sprinttemp[10]={0};$/;"	v
sprinttemp	opensslmd5API.h	/^	char sprinttemp[10]={0};$/;"	v
string	cJSON.h	/^    char *string;$/;"	m	struct:cJSON
stringtonumber	JSONPROPERTYSERVER.cpp	/^T stringtonumber(const string &str)\/\/如果不加const 形参是匿名对象不会成功传参$/;"	f
strlis	myredis.h	/^		list<string>strlis;$/;"	m	class:Redis
strlis	testredis.cpp	/^		list<string>strlis;$/;"	m	class:Redis	file:
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
true	cJSON.c	46;"	d	file:
type	cJSON.h	/^    int type;$/;"	m	struct:cJSON
updateExpire	myredis.h	/^void Redis::updateExpire(string name,int timeout)$/;"	f	class:Redis
updateExpire	redis.cpp	/^void Redis::updateExpire(QString name, int timeout)$/;"	f	class:Redis
updateExpire	testredis.cpp	/^void Redis::updateExpire(string name,int timeout)$/;"	f	class:Redis
update_offset	cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
utf16_literal_to_utf8	cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
valuedouble	cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
worker_thread_func	HIGHPROPERTYSERVER.cpp	/^void * worker_thread_func(void *ptr)$/;"	f
worker_thread_func	JSONPROPERTYSERVER.cpp	/^void * worker_thread_func(void *ptr)$/;"	f
worker_threads	HIGHPROPERTYSERVER.cpp	/^int worker_threads=8;$/;"	v
worker_threads	JSONPROPERTYSERVER.cpp	/^int worker_threads=8;$/;"	v
~AutoLock	HIGHPROPERTYSERVER.cpp	/^        ~AutoLock()$/;"	f	class:AutoLock
~AutoLock	JSONPROPERTYSERVER.cpp	/^		~AutoLock()$/;"	f	class:AutoLock
~Channel	HIGHPROPERTYSERVER.cpp	/^        ~Channel()$/;"	f	class:Channel
~Channel	JSONPROPERTYSERVER.cpp	/^		~Channel()$/;"	f	class:Channel
~Json	json.cpp	/^Json::~Json()$/;"	f	class:Json
~JsonArray	json.cpp	/^JsonArray::~JsonArray()$/;"	f	class:JsonArray
~Redis	myredis.h	/^Redis::~Redis()$/;"	f	class:Redis
~Redis	redis.cpp	/^Redis::~Redis()$/;"	f	class:Redis
~Redis	testredis.cpp	/^Redis::~Redis()$/;"	f	class:Redis
~mysqllib	myownsql/mysqllib.cpp	/^mysqllib::~mysqllib()$/;"	f	class:mysqllib
~mysqllib	mysqllib.cpp	/^mysqllib::~mysqllib()$/;"	f	class:mysqllib
